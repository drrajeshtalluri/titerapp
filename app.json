[{"name":"app.R","content":"library(shiny)\r\nlibrary(glue)\r\nlibrary(ggplot2)\r\nlibrary(DT)\r\nlibrary(magrittr)\r\nlibrary(readr)\r\nlibrary(dplyr)\r\n# Define UI\r\nui <- fluidPage(\r\n  titlePanel(\"Inactivation Kinetics of Virus\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      textInput(\"subtitle\", \"Enter Batch Number\", \"e.g. Batch Number 100075\"),\r\n      fileInput(\"file\", \"Upload CSV file with 'Time' and 'Titer_log' columns\"),\r\n      numericInput(\"volume\", \"Enter Volume (ml)\", value = 55000),\r\n      actionButton(\"submit\", \"Generate Plot\"),\r\n      downloadButton(\"downloadPlot\", \"Download Plot\")\r\n      \r\n    ),\r\n    mainPanel(\r\n      plotOutput(\"virusPlot\",width = 1000,height = 800),\r\n      DTOutput(\"dataTable\"),  # Data table output\r\n      verbatimTextOutput(\"interceptDetails\")  # Detailed text output\r\n    )\r\n  )\r\n)\r\n\r\n# Server logic\r\nserver <- function(input, output, session) {\r\n  \r\n  # Read and store the uploaded file\r\n  inputData <- reactive({\r\n    req(input$file)\r\n    inFile <- input$file\r\n    if (is.null(inFile)) {\r\n      return(NULL)\r\n    }\r\n    read_csv(inFile$datapath)\r\n  })\r\n  \r\n  # Generate the plot and calculate x-intercepts when user clicks submit\r\n  calculatedValues <- eventReactive(input$submit, {\r\n    data <- inputData()\r\n    if (is.null(data)) {\r\n      return(NULL)\r\n    }\r\n    volume <- input$volume\r\n    # Processing data\r\n    data <- data %>% set_names(c(\"Time\",\"Titer_log\")) %>%\r\n      mutate(\r\n        Infective_titre_per_ml = 10^Titer_log,\r\n        Total_virus = as.numeric(input$volume) * Infective_titre_per_ml,\r\n        Log_Infective_titre_per_ml = log10(Infective_titre_per_ml),\r\n        Log_Total_virus = log10(Total_virus)\r\n      )\r\n    \r\n    reg_titre <- lm(Log_Infective_titre_per_ml ~ Time, data = data)\r\n    reg_virus <- lm(Log_Total_virus ~ Time, data = data)\r\n    xint1 <- abs(coef(reg_titre)[1]/coef(reg_titre)[2])\r\n    xint2 <- abs(coef(reg_virus)[1]/coef(reg_virus)[2])\r\n    \r\n    # Predict using the regression models for plotting\r\n    newdata  = tibble (Time = seq(0,(xint1), by = 1))\r\n    pdata1 = newdata |> mutate(Pred_Log_Titre = predict(reg_titre, newdata = newdata),\r\n                               Pred_Log_Virus_1 = predict(reg_virus, newdata = newdata),\r\n                               Pred_Log_Virus = log10(10^Pred_Log_Virus_1/volume))\r\n    \r\n    # Predict using the regression models for plotting\r\n    newdata  = tibble (Time = seq(0,(xint2),by = 1))\r\n    pdata2 = newdata |> mutate(Pred_Log_Titre = predict(reg_titre, newdata = newdata),\r\n                               Pred_Log_Virus_1 = predict(reg_virus, newdata = newdata),\r\n                               Pred_Log_Virus = log10(10^Pred_Log_Virus_1/volume))\r\n    c0 = '#1f77b4'\r\n    c1 = \"#ff7f0e\"\r\n    c2 = '#2ca02c'\r\n    c3 = '#d62728'\r\n    # Assume pdata is your data frame, and Time, Pred_Log_Titre, Pred_Log_Virus are columns in pdata\r\n    # Ensure volume is defined before using it in antilog_format_secondary\r\n    \r\n    # Functions to convert log scale labels to antilog scale\r\n    antilog_format <- function(x) {\r\n      format(10^x, scientific = TRUE)\r\n    }\r\n    \r\n    antilog_format_secondary <- function(x) {\r\n      format(10^x * volume, scientific = TRUE)  # Ensure 'volume' is defined\r\n    }\r\n    \r\n    # Axis break points\r\n    prim_breaks = c(-5:10)\r\n    sec_breaks = log10(10^(15:-2) / volume)  # Ensure 'volume' is defined\r\n    \r\n    # Plotting\r\n    # Plotting\r\n    p<- ggplot() + geom_point(data=data, aes(x = Time,y = Titer_log))+\r\n      \r\n      geom_line(data  = pdata2, aes(y = Pred_Log_Virus,x = Time, colour = \"Total virus\"), size = 1,linetype = \"dashed\") +\r\n      geom_line(data = pdata1, aes(y = Pred_Log_Titre, x = Time, colour = \"Infective titre/ml\"), size = 1) +\r\n      scale_y_continuous(\r\n        name = \"Infective titre/ml (CCID50%)\",\r\n        limits = c(-10, 15),  # Adjust these limits based on your data range\r\n        labels = antilog_format,  # Labels to antilog\r\n        breaks = prim_breaks,\r\n        sec.axis = sec_axis(~ ., name = \"Total virus (CCID50%)\", labels = antilog_format_secondary, breaks = sec_breaks)\r\n      ) +\r\n      scale_x_continuous(breaks = seq(0,(xint2+10),by = 10))+\r\n      labs(\r\n        title = \"Inactivation Kinetics of virus\",\r\n        x = \"Time (hours)\"\r\n      ) +\r\n      geom_hline(yintercept = 0, linetype = \"dashed\", color = c0) +\r\n      geom_hline(yintercept = log10(1/volume), linetype = \"dashed\", color = c1) +\r\n      geom_vline(xintercept = xint1, linetype = \"dashed\", color = c0) +\r\n      geom_vline(xintercept = xint2, linetype = \"dashed\", color = c1) +\r\n      # Ensure 'volume' is defined\r\n      scale_colour_manual(values = c(\"Infective titre/ml\" = c0, \"Total virus\" = c1)) +annotate(\"text\", x = xint1, y = 0, label = glue('Time = {format(xint1,digits = 2, nsmall =2)}'), vjust = -0.5, hjust = - 0.1, color = c0, size = 3.5) +\r\n      annotate(\"text\", x = xint2, y = log10(1/volume), label = glue('Time = {format(xint2,digits = 2, nsmall =2)}'), vjust = 1.3, hjust = 1.3, color = c1, size = 3.5)+theme_minimal() + theme(legend.position = 'top')+ theme(legend.direction = 'horizontal')+ labs(subtitle  =  input$subtitle) + guides(colour=guide_legend(title=\"\")) + theme(\r\n        axis.line = element_line(linetype = \"solid\"),\r\n        panel.grid.major = element_line(linetype = \"blank\"),\r\n        panel.grid.minor = element_line(linetype = \"blank\"))+ theme( \r\n          axis.title.x = element_text(hjust=0.5,size = 12), \r\n          axis.title.y = element_text(hjust=0.5, size = 12),\r\n          axis.title.y.right = element_text(hjust=0.5,size =12),\r\n          legend.text = element_text(size = 12)\r\n        )\r\n    \r\n    list(data = data, xint1 = xint1, xint2 = xint2, plot = p)\r\n  })\r\n  \r\n  # Render the data table\r\n  output$dataTable <- renderDT({\r\n    req(calculatedValues())\r\n    datatable(calculatedValues()$data |> select(Time,Titer_log,Infective_titre_per_ml,\r\n                                                Total_virus ,\r\n                                                Log_Total_virus) |> set_names(c(\"Time(hours)\",\"Log(Titre/ml)\",\"Titre/ml\",\"Total Virus\", \"Log(Total Virus)\")), options = list(pageLength = 10), editable = FALSE)\r\n  })\r\n  \r\n  # Render the x-intercepts as text output\r\n  output$xIntercepts <- renderText({\r\n    req(calculatedValues())\r\n    paste(\"X-intercept for Infective titre/ml:\", format(calculatedValues()$xint1, digits = 2,nsmall =2), \r\n          \"X-intercept for Total virus:\", format(calculatedValues()$xint2, digits = 2,nsmall =2))\r\n  })\r\n  \r\n  # Detailed intercepts output\r\n  output$interceptDetails <- renderPrint({\r\n    req(calculatedValues())\r\n    cat(\"Details of X-intercept for titre/ml:\\n\")\r\n    cat(glue(\"Time when Infective titre/ml reaches a critical point: {format(calculatedValues()$xint1, digits = 2,nsmall =2)} hours\\n\"))\r\n    cat(\"\\n\")\r\n    cat(\"Details of X-intercept for total virus:\\n\")\r\n    cat(glue(\"Time when Total virus reaches a critical point: {format(calculatedValues()$xint2, digits = 2,nsmall =2)} hours\\n\"))\r\n  })\r\n  \r\n  # Generate the plot\r\n  output$virusPlot <- renderPlot({\r\n    req(calculatedValues())\r\n    calculatedValues()$plot\r\n    \r\n  })\r\n  \r\n  output$downloadPlot <- downloadHandler(\r\n    filename = function() {\r\n      paste(\"virus_kinetics_plot_\", Sys.Date(),input$subtitle, \".png\", sep = \"\")\r\n    },\r\n    content = function(file) {\r\n      req(calculatedValues())\r\n      p <- calculatedValues()$plot\r\n      ggsave(file, plot = p, width = 12, height = 10, device = \"png\", bg = \"white\")\r\n    },\r\n    contentType = \"image/png\"\r\n  )\r\n  \r\n  \r\n  \r\n  \r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
